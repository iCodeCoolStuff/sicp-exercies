(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (queue-empty?)
      (null? front-ptr))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (insert! item)
      (let ((new-pair (cons item '())))
	(cond ((queue-empty?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr!  new-pair))
	      (else
		(set-cdr! rear-ptr new-pair)
		(set-rear-ptr! new-pair)))))
    (define (delete!)
      (cond ((queue-empty?)
	     (error "DELETE! called with an emptry queue" front-ptr))
	    (else
	     (set-front-ptr! (cdr front-ptr)))))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
	    ((eq? m 'rear-ptr) rear-ptr)
	    ((eq? m 'empty?) queue-empty?)
	    ((eq? m 'set-front-ptr!) set-front-ptr!)
	    ((eq? m 'set-rear-ptr!) set-rear-ptr!)
	    ((eq? m 'insert!) insert!)
	    ((eq? m 'delete!) delete!)
	    (else (error "Invalid Command -- DISPATCH" m))))
    dispatch))

(define (test)
  (define a (make-queue))
  ((a 'insert!) 'a)
  ((a 'insert!) 'b)
  (display (a 'front-ptr))(newline)
  ((a 'delete!))
  (display (a 'front-ptr))(newline)
  (display ((a 'empty?)))(newline)
  ((a 'delete!))
  (display ((a 'empty?)))(newline)
  ((a 'insert!) 'a)
  ((a 'insert!) 'b)
  ((a 'insert!) 'c)
  ((a 'insert!) 'd)
  (display (a 'rear-ptr))(newline)
  (display (a 'front-ptr))(newline))
