(define (make-deque)
  (cons '() '()))
(define (make-node value)
  (cons value (cons '() '())))
(define (value node)
  (car node))
(define (set-left-ptr! node ptr)
  (set-car! (ptrs node) ptr))
(define (set-right-ptr! node ptr)
  (set-cdr! (ptrs node) ptr))
(define (left-ptr node)  (cadr node))
(define (right-ptr node) (cddr node))
(define (ptrs node) (cdr node))
(define (front-deque deque) (car deque))
(define (rear-deque deque) (cdr deque))
(define (empty-deque? deque)
  (and (null? (front-deque deque)) (null? (rear-deque deque))))
(define (set-front-deque! deque node)
  (set-car! deque node))
(define (set-rear-deque! deque node)
  (set-cdr! deque node))
(define (empty-insert! deque node)
  (set-front-deque! deque node)
  (set-rear-deque! deque node))
(define (one-element? deque)
  (eq? (front-deque deque) (rear-deque deque)))
(define (front-insert-deque! deque value)
  (let ((new-node (make-node value)))
    (cond ((empty-deque? deque)
	   (empty-insert! deque new-node))
          (else
	    (let ((second-front (front-deque deque)))
	      (set-left-ptr! second-front new-node)
	      (set-right-ptr! new-node second-front)
	      (set-front-deque! deque new-node))))))
(define (rear-insert-deque! deque value)
  (let ((new-node (make-node value)))
    (cond ((empty-deque? deque)
	   (empty-insert! deque new-node))
          (else
	    (let ((second-rear (rear-deque deque)))
	      (set-right-ptr! second-rear new-node)
	      (set-left-ptr!  new-node second-rear)
	      (set-rear-deque! deque new-node))))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "FRONT-DELETE-DEQUE! called with an empty deque" deque))
        ((one-element? deque)
	 (set! deque (make-deque)))
        (else
	  (let ((second-front (right-ptr (front-deque deque))))
	    (set-front-deque! deque second-front)
	    (set-left-ptr! second-front '())))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "REAR-DELETE-DEQUE! called with an empty deque" deque))
        ((one-element? deque)
	 (set! deque (make-deque)))
        (else
	  (let ((second-rear (left-ptr (rear-deque deque))))
	    (set-rear-deque! deque second-rear)
	    (set-right-ptr! second-rear '())))))
