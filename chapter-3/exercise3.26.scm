(define (make-table)
  (let ((table (list (cons '() '()) (cons '() '()))))
    (define (empty? pair)
      (and (null? (car pair)) (null? (cdr pair))))
    (define (make-kv-pair key value)
      (cons key value))
    (define (make-tree key value)
      (list (make-kv-pair key value)
	    (cons '() '())))
    (define (left-tbl tbl)  (cadr tbl))
    (define (right-tbl tbl) (cddr tbl))
    (define (tag tbl)   (caar tbl))
    (define (entry tbl) (cdar tbl))
    (define (kv-pair tbl)   (car tbl))
    (define (tree-pair tbl) (cdr tbl))
    (define (set-left-tbl! tree1 tree2)
      (set-cdr! tree1 (cons tree2 (right-tbl tree1))))
    (define (set-right-tbl! tree1 tree2)
      (set-cdr! tree1 (cons (left-tbl tree1) tree2)))
    (define (insert! key val)
      (define (insert-rec! tree k v)
	(cond ((null? (tag tree))
	        (set-car! tree (make-kv-pair k v))
		(set-left-tbl! tree (make-tree '() '()))
		(set-right-tbl! tree (make-tree '() '())))
	      ((eq? (tag tree) k)
	        (set-cdr! (kv-pair tree) v))
	      ((> k (tag tree))
	       (insert-rec! (right-tbl tree) k v))
	      (else
		(insert-rec! (left-tbl tree) k v))))
      (insert-rec! table key val))
    (define (lookup key)
      (define (lookup-rec tree k)
	(cond ((empty? (kv-pair tree))
	       false)
	      ((eq? (tag tree) k)
	        (entry tree))
	      ((> k (tag tree))
	       (lookup-rec (right-tbl tree) k))
	      (else
		(lookup-rec (left-tbl tree) k))))
      (lookup-rec table key))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc!) insert!)
	    (else (error "Unkown operation -- TABLE" m))))
    dispatch))

(define (test)
  (define tbl (make-table))
  (define get (tbl 'lookup-proc))
  (define put (tbl 'insert-proc!))
  (put 10 'a)
  (put 2 'b)
  (get 2))
