(define (same-key-test? key-1 key-2)
  (eq? key-1 key-2))

(define (make-table-nd n)
  (let ((table (list '*table*)))
    (define (insert! value . keys)
      (define (insert-iter! tbl key-list)
	(if (= (length key-list) 1)
	     (let ((record (assoc (car key-list) (cdr tbl))))
	       (if record
		   (set-cdr! record value)
		   (set-cdr! tbl (cons (cons (car key-list) value)
					     (cdr tbl)))))
	     (let ((subtable (assoc (car key-list) (cdr tbl))))
	       (if subtable
                   (insert-iter! subtable (cdr key-list))
		   (let ((new-table (list (car key-list))))
		     (set-cdr! tbl (cons new-table (cdr tbl)))
		     (insert-iter! new-table (cdr key-list)))))))
      (if (= n (length keys)) 
	  (insert-iter! table keys)
	  (error "Number of keys must match table dimension -- INSERT!" (list value keys))))
    (define (lookup . keys)
      (define (lookup-iter tbl key-list)
	(if (= (length key-list) 1)
	       (let ((record (assoc (car key-list) (cdr tbl))))
		 (if record
		     (cdr record)
		     false))
	       (let ((subtable (assoc (car key-list) (cdr tbl))))
		 (if subtable
		     (lookup-iter subtable (cdr key-list))
		     false))))
      (if (= n (length keys))
	  (lookup-iter table keys)
	  (error "Number of keys must match table dimension -- LOOKUP" keys)))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc!) insert!)
	    (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define (test)
  (define fourd (make-table-nd 4))
  ((fourd 'insert-proc!) 1 'a 'b 'f 'e)
  ((fourd 'insert-proc!) 1 'a 'b 'd 'f)
  ((fourd 'insert-proc!) 1 'a 'b 'a 'g)
  ((fourd 'insert-proc!) 3 'a 'b 'c 'h)
  ((fourd 'insert-proc!) 2 'a 'b 'd 'e)
  ((fourd 'lookup-proc) 'b 'b 'a 'z))
