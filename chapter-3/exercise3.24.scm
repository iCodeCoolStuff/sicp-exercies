(define (same-key-test? key-1 key-2)
  (eq? key-1 key-2))

(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (make-record key value)
      (cons key value))
    (define (assoc key records)
      (cond ((null? records) false)
	    ((same-key? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))
    (define (insert! key value)
      (let ((records (cdr local-table)))
	(set-cdr! local-table (cons (cons key value) records))
	'ok))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
	(if record
	    (cdr record)
	    false)))
  (define (dispatch m)
    (cond ((eq? 'lookup-proc m) lookup)
          ((eq? 'insert-proc! m) insert!)
	  (else (error "Unknown operation: TABLE" m))))
  dispatch))

(define operation-table (make-table same-key-test?))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

(define (make-table-2d same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
	    ((same-key? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))
    (define (insert-2d! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
	(if subtable
	    (let ((record (assoc key-2 (cdr subtable))))
	      (if record
		  (set-cdr! record value)
		  (set-cdr! subtable (cons (cons key-2 value) (cdr subtable)))))
	    (set-cdr! local-table 
		      (cons 
			(list key-1 (cons key-2 value))
				    (cdr local-table)))))
      'ok)
    (define (lookup-2d key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
	(if subtable
	    (let ((record (assoc key-2 (cdr subtable))))
	      (if record
		  (cdr record)
		  false))
	    false)))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup-2d)
	    ((eq? m 'insert-proc!) insert-2d!)
	    (else (error "Unknown operation: TABLE" m))))
  dispatch))

(define (test)
  (define table-2d (make-table-2d same-key-test?))
    ((table-2d 'insert-proc!) 'a 'b 1)
    (display ((table-2d 'lookup-proc) 'a 'b))(newline)
    ((table-2d 'insert-proc!) 'a 'c 3)
    (display ((table-2d 'lookup-proc) 'a 'c))(newline))
