(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (intersect set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((= (car set1) (car set2)) (cons (car set1) (intersect (cdr set1) (cdr set2))))
	((> (car set1) (car set2)) (intersect set1 (cdr set2)))
	(else (intersect (cdr set1) set2))))

(define (tree->list tree)
  (if (null? tree)
      '()
      (append (tree->list (left-branch tree))
              (cons (entry tree)
                    (tree->list (right-branch tree))))))

(define (tree->list tree)
  (if (null? tree)
      '()
      (append (tree->list (left-branch tree))
	      (cons (entry tree)
		    (tree->list
		      (right-branch tree))))))

(define (intersection-set tree1 tree2)
  (let ((set1 (tree->list tree1))
	(set2 (tree->list tree2)))
    (list->tree (intersect set1 set2))))

(define (union-set tree1 tree2)
  (let ((set1 (tree->list tree1))
	(set2 (tree->list tree2)))
    (list->tree (union set1 set2))))

(define (union set1 set2)
  (cond ((and (null? set1) (null? set2)) ())
        ((null? set1) set2)
	((null? set2) set1)
	((= (car set1) (car set2)) (cons (car set1) (union (cdr set1) (cdr set2))))
	((> (car set1) (car set2)) (cons (car set2) (union set1 (cdr set2))))
	(else                      (cons (car set1) (union (cdr set1) set2)))))

(define (test l1 l2)
  (intersection-set (list->tree l1) (list->tree l2)))

(define (test2 l1 l2)
  (union-set (list->tree l1) (list->tree l2)))
