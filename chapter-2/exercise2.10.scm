(define (width interval)
  (/ (- (upper-bound interval) (lower-bound interval)) 2))

(define (make-interval a b) (cons a b))
(define (upper-bound c) (cdr c))
(define (lower-bound c) (car c))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (= (width y) 0) (error "Width of second argument cannot be 0. Interval: " y)
  (mul-interval x (make-interval (/ 1.0 (upper-bound y))
				 (/ 1.0 (lower-bound y))))))

(define (test)
  (let ((a (make-interval 4 8))
	(b (make-interval 1 1))
        (c (make-interval 2 4)))
    (display "Normal operation: ")
    (display (div-interval a c))
    (newline)
    (display "Divide by zero: ")
    (div-interval a b)))
