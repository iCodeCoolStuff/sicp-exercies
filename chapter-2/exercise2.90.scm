(define (adjoin-term term term-list)
  (if (=zero? (coeff term))
      term-list
       (cons term term-list)))

(define (install-sparse-package)
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (eq? term-list the-empty-termlist))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (make-sparse-polynomial var term-list)
    (cons (var term-list)))
  (define (term-list p) (cdr p))
  (define (variable  p) (car p))
  (define (negate-term term)
    (make-term (order term) (mul (coeff term) -1)))

  (define (tag-poly x) (cons 'sparse x))
  (define (tag-term x) (cons 'sparse-term x))
  (define (tag-list x) (cons 'sparse-list x))
  (put 'variable        'sparse        variable)
  (put 'make            '(coeff scheme-number) (lambda (x y) (tag-term (make-term  x y))))
  (put 'first-term      'sparse-list   (lambda (x)     (tag-term (first-term x))))
  (put 'rest-terms      'sparse-list   (lambda (x)     (tag-list (rest-terms x))))
  (put 'term-list       'sparse-list   (lambda (x)     (tag-list (term-list  x))))
  (put 'empty-termlist? 'sparse-list   empty-termlist?)
  (put 'order           'sparse-term   order)
  (put 'coeff           'sparse-term   coeff)
  (put 'negate          'sparse-term   negate-term)
  (put 'make            'sparse       (lambda (var term-list) (tag-poly (make-sparse-polynomial var term-list))))
'done)

(define (install-dense-package)
  (define (the-empty-termlist) '())
  (define (first-term term-list)
    (let ((ord (- (length term-list) 1)))
      (make-term ord (car term-list) (enumerate-zero (- ord 1)))))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (eq? term-list the-empty-termlist))
  (define (make-term order coeff)
    (append (list coeff) (enumerate-zero (- order 1))))
  (define (order term) (- (length term) 1))
  (define (coeff term) (car term))
  (define (enumerate-zero n)
    (if (= n 0)
	'()
	(cons 0 (enumerate-zero (- n 1)))))
  (define (make-dense-polynomial var term-list)
    (cons (var term-list)))
  (define (term-list p) (cdr p))
  (define (variable  p) (car p))
  (define (negate-term term)
    (make-term (order term) (mul (coeff term) -1)))

  (define (tag-poly x) (cons 'dense x))
  (define (tag-term x) (cons 'dense-term x))
  (define (tag-list x) (cons 'dense-list x))
  (put 'variable        'dense          variable)
  (put 'make            '(coeff scheme-number)  (lambda (x y) (tag-term (make-term x y))))
  (put 'first-term      'dense-term     (lambda (x)   (tag-term (first-term x))))
  (put 'rest-terms      'dense-list     (lambda (x)   (tag-list (rest-terms x))))
  (put 'term-list       'dense-list     (lambda (x)   term-list)
  (put 'empty-termlist? 'dense-list     empty-termlist?)
  (put 'order           'dense-term     order)
  (put 'coeff           'dense-term     coeff)
  (put 'negate          'dense-term     negate-term)
  (put 'make            '(variable      dense-list) (lambda (var term-list) (tag (make-dense-polynomial var term-list))))
'done)

(define (install-polynomial-package)
  (define (make-dense-polynomial variable term-list)
    ((get 'make 'dense) var terms))
  (define (make-sparse-polynomial variable term-list)
    ((get 'make 'sparse) var terms))
  (define (adjoin-term x term-list) (apply-generic 'adjoin-term x term-list))
  (define (empty-termlist? term-list) (apply-generic 'empty-termlist term-list))
  (define (variable p)  (apply-generic 'variable p))
  (define (term-list p) (apply-generic 'term-list p))
  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (make-term var terms) (apply-generic 'make var terms)) 
  (define (negate term) (apply-generic 'negate term))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- ADD-POLY"
             (list p1 p2))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1)) (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))

  (define (mul-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var -- MUL-POLY"
             (list p1 p2))))

  (define (mul-terms L1 L2)
  (if (empty-termlist? L1)
      (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term L1) L2)
                 (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))

  (define (sub-polynomials p1 p2)
    (cond ((=zero? p1) (negate p2))
          ((=zero? p2) p1)
	  (else (add-poly p1 (negate p2)))))

  (define (=zero? p)
    (empty-termlist? p))

  (define (negate-polynomial polynomial)
    (make-polynomial (variable polynomial) (map negate (term-list polynomial))))

  (define (tag x) (cons 'polynomial x))
  (put 'make-dense-polynomial  'polynomial (lambda (var terms) (tag (make-dense-polynomial var terms))))
  (put 'make-sparse-polynomial 'polynomial (lambda (var terms) (tag (make-sparse-polynomial var terms))))
  (put 'add '(polynomial polynomial) add-poly)
  (put 'mul '(polynomial polynomial) mul-poly)
  (put 'sub '(polynomial polynomial) sub-poly)
  (put '=zero? 'polynomial =zero?)
  (put 'negate 'polynomial negate-polynomial)
'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
            "No method for these types -- APPLY-GENERIC"
            (list op type-tags))))))
