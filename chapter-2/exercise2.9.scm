(define (width interval)
  (/ (- (upper-bound interval) (lower-bound interval)) 2))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
		 (+ (upper-bound x) (upper-bound y))))

(define (make-interval a b) (cons a b))
(define (upper-bound c) (cdr c))
(define (lower-bound c) (car c))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x (make-interval (/ 1.0 (upper-bound y))
				 (/ 1.0 (lower-bound y)))))

(define (test)
  (let ((a (make-interval 2 4))
	(b (make-interval 3 5)))
    (display "Interval width by adding: ")
    (display (width (add-interval a b)))
    (newline)
    (display "Adding interval widths: ")
    (display (+ (width a) (width b)))))

(define (test2)
    (display "Showing that it does not work for multiplication or division:")

    (newline)
    (newline)

    (display "Multiplication: ")
    (newline)
  (let ((a (make-interval 1 5))
	(b (make-interval 2 4)))
    (display "Width by multiplying: ")
    (display (width (mul-interval a b)))
    (newline)
    (display "Multiplying Widths: ")
    (display (* (width a) (width b)))

    (newline)
    (newline)

    (display "Division: ")
    (newline)
    (display "Width by dividing: ")
    (display (width (div-interval a b)))
    (newline)
    (display "Dividing Widths: ")
    (display (/ (width a) (width b)))))
