(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

Normal-order evaulation:

remainder = rm

(gcd 206 40)
(if (= b 0) a (gcd b (remainder a b)))
(if (= 40 0) 206 (gcd 40 (rm 206 40)))
(gcd 40 (rm 206 40))
(if (= (rm 206 40) 0) (gcd (rm 206 40) (rm 40 (rm 206 40))))
(if (= 6 0) (gcd (rm 206 40) (rm 40 (rm 206 40))))
(gcd (rm 206 40) (rm 40 (rm 206 40))) 1 time
(if (= (rm 40 (rm 206 40)) 0) (gcd (rm 206 40) (rm (rm 206 40) (rm 40 (rm 206 40)))))
(if (= (rm 40 6) 0) (gcd (rm 40 (rm 206 40)) (rm (rm 206 40) (rm 40 (rm 206 40)))))
(if (= 4 0) (gcd (rm 206 40) (rm (rm 206 40) (rm 40 (rm 206 40))))) 2 times
(gcd (rm 40 (rm 206 40)) (rm (rm 206 40) (rm 40 (rm 206 40))))

it goes on and on but the reported number of times that remainder gets triggered is 18 times.

remainder evaluated: 18 times

Applicative-order evaluation:
(gcd 206 40)
(if (= b 0) a (gcd b (remainder 206 40)))
(if (= 40 0) 206 (gcd 40 6))
(gcd 40 6)
(if (= b 0) a (gcd 6 (remainder 40 6)))
(if (= 6 0) 40 (gcd 6 4)
(gcd 6 4)
(if (= b 0) a (gcd 4 (remainder 6 4)))
(if (= 4 0) 6 (gcd 4 2)
(gcd 4 2)
(if (= b 0) a (gcd 2 (remainder 4 2)))
(if (= 2 0) 4 (gcd 2 0)
(gcd 2 0)
(if (= 0 0) a (gcd 2 (remainder 2 0)))
2

remainder evaluated: 4 times
