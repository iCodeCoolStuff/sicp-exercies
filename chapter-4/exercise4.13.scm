; make-unbound! only deletes a bound variable in the first frame instead of all
; frames This is so that make-unbound! is useful for implementing lexical scoping.
(define (unbinding? exp)
  (tagged-list? exp 'make-unbound!))
(define (unbinding-variable exp)
  (cadr exp))
(define (make-unbinding var)
  (list 'make-unbound var))
(define (eval-unbinding exp env)
  (if (lookup-variable-value (unbinding-variable exp) exp)
      (unbind-variable (unbinding-variable exp) env)))
(define (unbind-variable var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? (cdr vars))
	     (env-loop (enclosing-environment env)))
	    ((eq? var (cadr vars))
	     (begin (set-cdr! vars (cddr vars))
		    (set-cdr! vals (cddr vals))
		    'ok))
	    (else
	      (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable" var)
	(let ((frame (first-frame env)))
	  (let ((vars (frame-variables frame))
		(vals (frame-values    frame)))
	    (cond ((null? (frame-variables frame))
	           (error "Unbound variable" var))
		  ((eq? (car vars) var)
	           (begin (set-car! frame (cdr vars))
		          (set-cdr! frame (cdr vals))
		          'ok))
		  (else (scan vars vals)))))))
  (env-loop env))

(define (enclosing-environment env) (cdr env))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
	  (error "Too many arguments supplied" vars vals)
	  (error "Too few arguments supplied" vars vals))))
(define (make-frame variables values)
  (cons variables values))
(define (first-frame env) (car env))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define the-empty-environment '())
(define (test)
  (define environ  '())
  (set! environ (extend-environment (list 'a 'b 'c) (list 1 2 3) environ))
  (unbind-variable 'b environ)
  environ)
