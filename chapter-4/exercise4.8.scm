(define (make-definition name params body)
  (list 'define (cons name params) body))
(define (let? exp) (tagged-list? exp 'let))
(define (named-let-symbol exp) (cadr exp))
(define (named-let? exp)
  (if (and (let? exp) (symbol? (named-let-symbol exp)))
      true
      false))
(define (let-bindings exp)
  (if (named-let? exp)
      (caddr exp)
      (cadr exp)))
(define (let-variables exp) (map car (let-bindings exp)))
(define (let-exps exp) (map cadr (let-bindings exp)))
(define (let-body exp)
  (if (named-let? exp)
      (cadddr exp)
      (caddr exp)))
(define (let->combination exp)
  (if (named-let? exp)
      (make-begin (list (make-definition (named-let-symbol exp)
			     (let-variables exp)
			     (let-body exp))
	    (cons (named-let-symbol exp) (let-exps exp))))
      (cons (make-lambda (let-variables exp) (let-body exp)) (let-exps exp))))
