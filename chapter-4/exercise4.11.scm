(define (make-table)
  (let ((local-table (list '*table*)))
    (define (make-record key value)
      (cons key value))
    (define (assoc key records)
      (cond ((null? records) false)
	    ((eq? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))
    (define (insert! key value)
      (let ((record (assoc key (cdr local-table))))
	(if record
	    (set-cdr! record value)
	    (set-cdr! table
		      (cons (cons key value) (cdr table)))))
      'ok)
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
	(if record
	    (cdr record)
	    false)))
    (define (records)
      (cdr local-table))
  (define (dispatch m)
    (cond ((eq? 'lookup-proc m) lookup)
          ((eq? 'insert-proc! m) insert!)
	  ((eq? 'records m) records)
	  (else (error "Unknown operation: TABLE" m))))
  dispatch))

(define (put table key value) ((table 'insert-proc!) key value))
(define (get table key) ((table 'lookup-proc) key))
(define (records table)
  ((table 'records)))
(define the-empty-environment '())
(define (first-frame env) (car env))
(define (enclosing-environment env) (cdr env))
(define (make-frame variables values)
  (let ((table (make-table)))
    (for-each (lambda (k v) (put table k v)) (map cons variables values))
  table))
(define (frame-variables frame) (map car (records frame)))
(define (frame-values frame) (map cdr (records frame)))
(define (add-binding-to-frame! var val frame) (put frame var val))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
	  (error "Too many arguments supplied" vars vals)
	  (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (if (null? env)
      (error "Unbound variable" env)
      (let ((record (get (first-frame env) var)))
	(if record
	    record
	    (lookup-variable-value var (enclosing-environment env))))))
(define (set-variable-value! var val env)
  (put (first-frame env) var val))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (put frame var val)))
